"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
let hiragana = "ぁあぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてでとどなに" +
    "ぬねのはばぱひびぴふぶぷへべぺほぼまみむめもゃやゅゆょよらりるれろゎわゐゑをんゔゕゖ";
let katakana = "ァアィイゥウェエォオカガキギクグケゲコゴサザシジスズセゼソゾタダチヂッツヅテデトドナニ" +
    "ヌネノハバパヒビピフブプヘベペホボマミムメモャヤュユョヨラリルレロヮワヰヱヲンヴヵヶ";
if (hiragana.length !== katakana.length) {
    throw new Error('Kana strings not same length?');
}
exports.kata2hiraMap = new Map([]);
exports.hira2kataMap = new Map([]);
hiragana.split('').forEach((h, i) => {
    exports.kata2hiraMap.set(katakana[i], h);
    exports.hira2kataMap.set(h, katakana[i]);
});
function kata2hira(s) { return s.split('').map(c => exports.kata2hiraMap.get(c) || c).join(''); }
exports.kata2hira = kata2hira;
function hira2kata(s) { return s.split('').map(c => exports.hira2kataMap.get(c) || c).join(''); }
exports.hira2kata = hira2kata;
/*
There are other ways of doing this. In Unicode, katakana is 96 codepoints above hiragana. So
`String.fromCharCode(hiragana.charCodeAt(0) + 96)` will produce katakana. In speed tests though, the above Map-based
approach had the least variability in runtime (200 to 800 microseconds), while arithmetic-based approaches used 100 to
1500 microseconds.
*/
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2FuYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImthbmEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJLFFBQVEsR0FBRyw2Q0FBNkM7SUFDN0MsNENBQTRDLENBQUM7QUFDNUQsSUFBSSxRQUFRLEdBQUcsNkNBQTZDO0lBQzdDLDRDQUE0QyxDQUFDO0FBRTVELElBQUksUUFBUSxDQUFDLE1BQU0sS0FBSyxRQUFRLENBQUMsTUFBTSxFQUFFO0lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO0NBQUU7QUFFbkYsUUFBQSxZQUFZLEdBQXdCLElBQUksR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELFFBQUEsWUFBWSxHQUF3QixJQUFJLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUMzRCxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtJQUNsQyxvQkFBWSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDakMsb0JBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ2xDLENBQUMsQ0FBQyxDQUFDO0FBRUgsU0FBZ0IsU0FBUyxDQUFDLENBQVMsSUFBSSxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsb0JBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUF4Ryw4QkFBd0c7QUFDeEcsU0FBZ0IsU0FBUyxDQUFDLENBQVMsSUFBSSxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsb0JBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUF4Ryw4QkFBd0c7QUFFeEc7Ozs7O0VBS0UiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgaGlyYWdhbmEgPSBcIuOBgeOBguOBg+OBhOOBheOBhuOBh+OBiOOBieOBiuOBi+OBjOOBjeOBjuOBj+OBkOOBkeOBkuOBk+OBlOOBleOBluOBl+OBmOOBmeOBmuOBm+OBnOOBneOBnuOBn+OBoOOBoeOBouOBo+OBpOOBpeOBpuOBp+OBqOOBqeOBquOBq1wiICtcbiAgICAgICAgICAgICAgIFwi44Gs44Gt44Gu44Gv44Gw44Gx44Gy44Gz44G044G144G244G344G444G544G644G744G844G+44G/44KA44KB44KC44KD44KE44KF44KG44KH44KI44KJ44KK44KL44KM44KN44KO44KP44KQ44KR44KS44KT44KU44KV44KWXCI7XG5sZXQga2F0YWthbmEgPSBcIuOCoeOCouOCo+OCpOOCpeOCpuOCp+OCqOOCqeOCquOCq+OCrOOCreOCruOCr+OCsOOCseOCsuOCs+OCtOOCteOCtuOCt+OCuOOCueOCuuOCu+OCvOOCveOCvuOCv+ODgOODgeODguODg+ODhOODheODhuODh+ODiOODieODiuODi1wiICtcbiAgICAgICAgICAgICAgIFwi44OM44ON44OO44OP44OQ44OR44OS44OT44OU44OV44OW44OX44OY44OZ44Oa44Ob44Oc44Oe44Of44Og44Oh44Oi44Oj44Ok44Ol44Om44On44Oo44Op44Oq44Or44Os44Ot44Ou44Ov44Ow44Ox44Oy44Oz44O044O144O2XCI7XG5cbmlmIChoaXJhZ2FuYS5sZW5ndGggIT09IGthdGFrYW5hLmxlbmd0aCkgeyB0aHJvdyBuZXcgRXJyb3IoJ0thbmEgc3RyaW5ncyBub3Qgc2FtZSBsZW5ndGg/Jyk7IH1cblxuZXhwb3J0IGxldCBrYXRhMmhpcmFNYXA6IE1hcDxzdHJpbmcsIHN0cmluZz4gPSBuZXcgTWFwKFtdKTtcbmV4cG9ydCBsZXQgaGlyYTJrYXRhTWFwOiBNYXA8c3RyaW5nLCBzdHJpbmc+ID0gbmV3IE1hcChbXSk7XG5oaXJhZ2FuYS5zcGxpdCgnJykuZm9yRWFjaCgoaCwgaSkgPT4ge1xuICBrYXRhMmhpcmFNYXAuc2V0KGthdGFrYW5hW2ldLCBoKTtcbiAgaGlyYTJrYXRhTWFwLnNldChoLCBrYXRha2FuYVtpXSlcbn0pO1xuXG5leHBvcnQgZnVuY3Rpb24ga2F0YTJoaXJhKHM6IHN0cmluZykgeyByZXR1cm4gcy5zcGxpdCgnJykubWFwKGMgPT4ga2F0YTJoaXJhTWFwLmdldChjKSB8fCBjKS5qb2luKCcnKTsgfVxuZXhwb3J0IGZ1bmN0aW9uIGhpcmEya2F0YShzOiBzdHJpbmcpIHsgcmV0dXJuIHMuc3BsaXQoJycpLm1hcChjID0+IGhpcmEya2F0YU1hcC5nZXQoYykgfHwgYykuam9pbignJyk7IH1cblxuLypcblRoZXJlIGFyZSBvdGhlciB3YXlzIG9mIGRvaW5nIHRoaXMuIEluIFVuaWNvZGUsIGthdGFrYW5hIGlzIDk2IGNvZGVwb2ludHMgYWJvdmUgaGlyYWdhbmEuIFNvXG5gU3RyaW5nLmZyb21DaGFyQ29kZShoaXJhZ2FuYS5jaGFyQ29kZUF0KDApICsgOTYpYCB3aWxsIHByb2R1Y2Uga2F0YWthbmEuIEluIHNwZWVkIHRlc3RzIHRob3VnaCwgdGhlIGFib3ZlIE1hcC1iYXNlZFxuYXBwcm9hY2ggaGFkIHRoZSBsZWFzdCB2YXJpYWJpbGl0eSBpbiBydW50aW1lICgyMDAgdG8gODAwIG1pY3Jvc2Vjb25kcyksIHdoaWxlIGFyaXRobWV0aWMtYmFzZWQgYXBwcm9hY2hlcyB1c2VkIDEwMCB0b1xuMTUwMCBtaWNyb3NlY29uZHMuXG4qL1xuIl19